1.版本管理  
	trunk 
	tag 
	release

	a.除了src其他都拎出去单独放?
		question:
			1.framework怎么同步开发
			2.res是否需要那么多的tag 
	哈哈哈哈哈哈哈哈

2.UI
	1.如何结合cocostudio（拼UI这活儿是否可以给除开前端的人）
		a.合图，工具结合，
		b.研究是否这个版本多用正方形是否更节省内存，从而决定合图导出的方案。
	2.适配方案：竖屏 决定美术需要做多大尺寸的背景图片。参考《天天打波利》的设计方式。

3.scene的使用:
	a.是要控制参数到范围之内，还是要进行管理
	b.程序内的跳转如何简单实现。

4.内存管理 
	a.从登陆到进入主程，加载些什么东西
	b.切换场景需要保留的内存，配置长期存在在内存池当中的资源，自己写一套内存管理类。


5.帧数控制
	a.尽量做到战斗里面所有的资源都是预加载过的。
	b.优化战斗里面算法的时间复杂度。
	c.update,层级控制

6.热更新
	1.一键发测试版本脚本() 00.00.00
	2.现有热更新方案:
		a.每个版本之间生成差异文件集合
		b.上传后服务器生成对应版本差异包
		c.客户通过自身版本下载对应的差异包。
		d.下载压缩包，然后解压缩。
	3.现有热更新不足:
		a.没有判断是否空间不足

7.数据管理
	1.Module	

8.报错方案处理
	1.lua报错发邮件的方案。	
	2.原生崩溃信息，通过接入SDK。

9.tints:
	1.进入游戏获取系统剩余内存。
	2.android的粒子如何处理，粒子效果做成两份(一份数量多,一份少[王者荣耀方案])。

10.新手引导方案。

11.弹出框队列。
	
啦啦啦啦啦，啦啦啦啦啦，啦啦啦啦啦，啦啦啦啦